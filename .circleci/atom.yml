#
# Atom CircleCI Orb
#

version: 2.1
description: Commands useful for building + deploying elements in the Atom system

#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:

  #
  # Basic Docker Build
  #

  # Basic build Arguments
  - &build_args
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      target_image:
        type: string
      build_args:
        type: string
        default: ""
      no_output_timeout:
        type: string
        default: 15m
      use_git_lfs:
        type: boolean
        default: false
      use_cache:
        type: boolean
        default: true
      cache_repo:
        type: string
      cache_tag:
        type: string
        default: build-cache
      executor:
        type: executor
        default: build-ubuntu

  # Mapping to pass build args through without modification
  - &build_args_mapping
      working_directory: << parameters.working_directory >>
      file: << parameters.file >>
      target_image: << parameters.target_image >>
      build_args: << parameters.build_args >>
      no_output_timeout: << parameters.no_output_timeout >>
      use_git_lfs: << parameters.use_git_lfs >>
      use_cache: << parameters.use_cache >>
      cache_repo: << parameters.cache_repo >>
      cache_tag: << parameters.cache_tag >>

  # Atom build arguments
  - &atom_build_args
      atom_repo:
        type: string
        default: elementaryrobotics/atom
      atom_tag:
        type: string
      atom_type:
        type: string

  - &atom_build_base_arg --build-arg ATOM_IMAGE=<< parameters.atom_repo >>:<< parameters.atom_tag >><< parameters.atom_type >>

  #
  # Test
  #

  - &test_shared_args
      nucleus_repo:
        type: string
        default: elementaryrobotics/nucleus
      atom_tag:
        type: string
      test_image:
        type: string
      test_tag:
        type: string
      compose_file:
        type: string
        default: .circleci/docker-compose.yml
      compose_addl_args:
        type: string
        default: ""
      container_name:
        type: string
        default: test-container
      container_test_dir:
        type: string
        default: /code
      test_cmd:
        type: string
      use_git_lfs:
        type: boolean
        default: false
      executor:
        type: executor
        default: build-ubuntu
      stage:
        type: string
        default: ""

  - &test_shared_args_mapping
      nucleus_repo: << parameters.nucleus_repo >>
      atom_tag: << parameters.atom_tag >>
      test_image: << parameters.test_image >>
      test_tag: << parameters.test_tag >>
      compose_file: << parameters.compose_file >>
      compose_addl_args: << parameters.compose_addl_args >>
      container_name: << parameters.container_name >>
      container_test_dir: << parameters.container_test_dir >>
      test_cmd: << parameters.test_cmd >>
      use_git_lfs: << parameters.use_git_lfs >>
      stage: << parameters.stage >>

  #
  # Deployment
  #

  # Deploy shared arguments. Note that target_tag_cmd isn't included
  # here but is an expected argument.
  - &deploy_shared_args
      source_image:
        type: string
      source_tag:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
      platforms:
        type: string
        default: "x86_64"
      stage:
        type: string
        default: ""

  # Deploy argument mapping
  - &deploy_shared_args_mapping
      platforms: << parameters.platforms >>
      source_image: << parameters.source_image >>
      source_tag: << parameters.source_tag >>
      target_image: << parameters.target_image >>
      target_tag: << parameters.target_tag >>
      stage: << parameters.stage >>

#
# Machines that can be used for build. Build-classic is typically
# what you want to use.
#
executors:

  # Ubuntu Machine used to build some images
  # Docker v20.10.2, Docker Compose v1.28.2,
  # This is useful since `buildx`, which is required in order
  # to cross-compile images, comes standard in Docker 19.03. There are
  # some buildx bugs that caused layers/files to be dropped that might be
  # resolved in 20.10.0, so we should ensure we're running a version
  # newer than this.

  build-ubuntu:
    machine:
      enabled: true
      image: ubuntu-2004:202101-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: medium

  build-ubuntu-large:
    machine:
      enabled: true
      image: ubuntu-2004:202101-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: large

  build-ubuntu-arm:
    machine:
      enabled: true
      image: ubuntu-2004:202101-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: arm.medium

  build-ubuntu-arm-large:
    machine:
      enabled: true
      image: ubuntu-2004:202101-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: arm.large

  # Docker-in-docker. Need to call setup_remote_docker
  # before using. Useful when you don't need a bunch of
  # CPU and are just deploying things
  docker-in-docker:
    docker:
      - image: cimg/base:2020.01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: small

#
# Commands that are useful for build and deploy
#
commands:

  # Install Git LFS
  install_git_lfs:
    description: Install Git Large File Storage (LFS) in ubuntu
    steps:
      - run:
          name: Download and install Git LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install -f git-lfs && git lfs install
      - run:
          name: Authenticate Git LFS
          command: |
            mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh git@github.com git-lfs-authenticate "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" download

  # Update submodules (parallelized)
  update_submodules:
    steps:
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive --jobs 8

  # Log into docker
  docker_login:
    description: "Logs into Dockerhub"
    steps:
      - run:
          name: Docker Login
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

  # Launch a compose file. Since it runs docker-compose up -d if the container
  # is already up then this will be a No-op. This is nice s.t. we can call the
  # test command multiple times without issue/relaunch
  run_compose:
    description: "Launch docker-compose"
    parameters:
      file:
        type: string
        default: docker-compose.yml
      build_args:
        type: string
        default: ""
    steps:
      - run:
          name: Launch docker-compose
          command: << parameters.build_args >> docker-compose -f << parameters.file >> up -d

  push_image:
    description: "Deploy a Docker image for a particular platform"
    parameters:
      target_image:
        type: string
      target_tag:
        type: string
    steps:
      - run:
          name: Push image << parameters.target_image >>:<< parameters.target_tag >>-$(arch)
          command: docker push << parameters.target_image >>:<< parameters.target_tag >>-$(arch)

  pull_image:
    description: "Pull a docker image for a particular platform"
    parameters:
      target_image:
        type: string
      target_tag:
        type: string
    steps:
      - run:
          name: Pull image << parameters.target_image >>:<< parameters.target_tag >>-$(arch)
          command: docker pull << parameters.target_image >>:<< parameters.target_tag >>-$(arch)

  create_manifest:
    description: "Create a multi-arch manifest for an image across the specified platforms"
    parameters:
      << : *deploy_shared_args
    steps:
      - docker_login
      - run:
          name: Create manifest
          command: |
            set -x
            manifest_str="<< parameters.target_image >>:<< parameters.target_tag >>"
            for platform in << parameters.platforms >>; do
              manifest_str="${manifest_str} --amend << parameters.source_image >>:<< parameters.source_tag >>-${platform}"
            done
            docker manifest create ${manifest_str}
            set +x
      - run:
          name: Push manifest
          command: docker manifest push << parameters.target_image >>:<< parameters.target_tag >>


  # Prepare the machine for buildx based builds
  enable_buildx:
    description: "Prepare the CircleCI machine for using buildx"
    parameters:
      buildkit_version:
        type: string
        default: v0.8.3
    steps:
      - run:
          name: Create builder with buildkit << parameters.buildkit_version >>
          command: docker buildx ls | grep "build-<< parameters.buildkit_version >>" || docker buildx create --name build-<< parameters.buildkit_version >> --driver docker-container --driver-opt image=moby/buildkit:<< parameters.buildkit_version >>,network=host
      - run:
          name: Set builder
          command: docker buildx use --default build-<< parameters.buildkit_version >>
      - run:
          name: Start up buildx and inspect
          command: docker buildx inspect --bootstrap

  # Run a Dockerfile build command and tags the resultant image with
  # << parameters.target_image >>:<< parameters.target_tag >>-$(arch)
  run_dockerfile_build:
    parameters:
      << : *build_args
      target_tag:
        type: string
      stage:
        type: string
        default: ""
      build_context:
        type: string
        default: "."
      atom_base_arg:
        type: string
    steps:
      - when:
          condition: << parameters.use_cache >>
          steps:
            - run:
                name: Set Input Cache
                command: echo 'export INPUT_CACHE_ARGS="--cache-from=type=registry,ref=<< parameters.cache_repo >>:<< parameters.cache_tag >>-$(arch)"' >> ${BASH_ENV}
      - unless:
          condition: << parameters.use_cache >>
          steps:
            - run:
                name: Skip Input Cache
                command: echo 'export INPUT_CACHE_ARGS=""' >> ${BASH_ENV}
      - run:
          name: "Build Dockerfile << parameters.file >> stage << parameters.stage >>"
          working_directory: << parameters.working_directory >>
          command: >-
            set -x;
            docker buildx build
            --progress plain
            --push
            ${INPUT_CACHE_ARGS}
            --cache-to=type=registry,ref=<< parameters.cache_repo >>:<< parameters.cache_tag >>-$(arch),mode=max
            --label "com.elementaryrobotics.tag=${CIRCLE_TAG}"
            --label "com.elementaryrobotics.branch=${CIRCLE_BRANCH}"
            --label "com.elementaryrobotics.repo=${CIRCLE_PROJECT_REPONAME}"
            --label "com.elementaryrobotics.commit=${CIRCLE_SHA1}"
            --label "com.elementaryrobotics.describe=$(git describe --tags)"
            --label "com.elementaryrobotics.build_num=${CIRCLE_BUILD_NUM}"
            --label "com.elementaryrobotics.build_url=${CIRCLE_BUILD_URL}"
            -t << parameters.target_image >>:<< parameters.target_tag >>-$(arch)
            -f << parameters.file >>
            << parameters.atom_base_arg >>
            << parameters.build_args >>
            --target=<< parameters.stage >>
            --pull
            << parameters.build_context >>
          no_output_timeout: 1h

  # Build a Dockerfile using docker buildx build
  build_dockerfile:
    description: "Build and tag a Dockerfile using buildx"
    parameters:
      << : *build_args
      target_tag:
        type: string
      stage:
        type: string
        default: ""
      atom_base_arg:
        type: string
        default: ""
    steps:

      # Enable the buildx builder
      - enable_buildx

      # Run the actual build.
      - run_dockerfile_build:
          << : *build_args_mapping
          target_tag: << parameters.target_tag >>
          stage: << parameters.stage >>
          atom_base_arg: << parameters.atom_base_arg >>

  run_test:
    parameters:
      << : *test_shared_args
    steps:
      - enable_buildx
      - run_compose:
          file: << parameters.compose_file >>
          build_args: << parameters.compose_addl_args >> NUCLEUS_IMAGE=<< parameters.nucleus_repo >>:<< parameters.atom_tag >> TEST_IMAGE=<< parameters.test_image >>:<< parameters.test_tag >>-$(arch)
      - run:
          name: Run Tests
          command: docker exec -it -w << parameters.container_test_dir >> << parameters.container_name >> << parameters.test_cmd >>

  build_shared_setup:
    parameters:
      use_git_lfs:
        type: boolean
    steps:
      - when:
          condition: << parameters.use_git_lfs >>
          steps:
            - install_git_lfs
      - checkout
      - update_submodules
      - docker_login

#
# Jobs that are nice to be able to share between elements
#
jobs:

  # Run ER formatting check
  check_formatting:
    docker:
      - image: elementaryrobotics/formatter
    resource_class: small
    description: Check formatting against flake8 and optionally black
    parameters:
      flake8_exclude:
        description: Flake8 exclude string
        type: string
        default: ""
      black_exclude:
        description: Black exclude string
        type: string
        default: ""
      use_black:
        description: Whether to use black or not. Set to empty string for no
        type: string
        default: "y"
      isort_exclude:
        description: Isort exclude string
        type: string
        default: ""
      update_submodules:
        description: Whether or not we should clone submodules
        type: boolean
        default: false
    steps:
      - checkout
      - when:
          condition: << parameters.update_submodules >>
          steps:
            - update_submodules
      - run:
          name: Check Formatting
          description: Run black & flake8 checks
          command: CODE_DIR=/root/project FLAKE8_EXCLUDE=<< parameters.flake8_exclude>> BLACK_EXCLUDE=<< parameters.black_exclude >> FORMAT_BLACK=<< parameters.use_black >> ISORT_EXCLUDE=<< parameters.isort_exclude >> /usr/local/bin/run.sh

  build_image:
    parameters:
      << : *build_args
      target_tag:
        type: string
      stage:
        type: string
        default: ""
    executor: << parameters.executor >>
    steps:
      - build_shared_setup:
          use_git_lfs: << parameters.use_git_lfs >>

      # Build + push user-specified Dockerfile
      - build_dockerfile:
          << : *build_args_mapping
          target_tag: << parameters.target_tag >>
          stage: << parameters.stage >>

  build_element:
    parameters:
      << : *build_args
      << : *atom_build_args
      target_tag:
        type: string
      stage:
        type: string
        default: ""
    executor: << parameters.executor >>
    steps:
      - build_shared_setup:
          use_git_lfs: << parameters.use_git_lfs >>

      # Build + push user-specified element at stage
      - build_dockerfile:
          << : *build_args_mapping
          stage: << parameters.stage >>
          target_tag: << parameters.target_tag >>
          atom_base_arg: *atom_build_base_arg

  build_element_prod_and_test:
    parameters:
      << : *build_args
      << : *atom_build_args
      target_tag:
        type: string
    executor: << parameters.executor >>
    steps:
      - build_shared_setup:
          use_git_lfs: << parameters.use_git_lfs >>

      # Build + push prod
      - build_dockerfile:
          << : *build_args_mapping
          stage: prod
          target_tag: << parameters.target_tag >>-prod
          atom_base_arg: *atom_build_base_arg

      # Build + push test
      - build_dockerfile:
          << : *build_args_mapping
          stage: test
          target_tag: << parameters.target_tag >>-test
          atom_base_arg: *atom_build_base_arg

  test:
    parameters:
      << : *test_shared_args
    executor: << parameters.executor >>
    steps:
      - build_shared_setup:
          use_git_lfs: << parameters.use_git_lfs >>
      - run_test:
          << : *test_shared_args_mapping

  # Deploy an Image
  deploy:
    executor: docker-in-docker
    parameters:
      << : *deploy_shared_args
    steps:
      - setup_remote_docker
      - create_manifest:
          << : *deploy_shared_args_mapping

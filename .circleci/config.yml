# .circleci/config.yml

#
# Parameters that can be set/changed for the build
#
parameters:

  # Atom parameters
  dockerhub_org:
    type: string
    default: ${DOCKERHUB_ORG}
  atom_repo_name:
    type: string
    default: ${DOCKERHUB_ATOM_REPO}
  nucleus_repo_name:
    type: string
    default: ${DOCKERHUB_NUCLEUS_REPO}
  metrics_repo_name:
    type: string
    default: ${DOCKERHUB_METRICS_REPO}
  formatter_repo_name:
    type: string
    default: ${DOCKERHUB_FORMATTER_REPO}
  cache_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_CACHE_REPO}
  dockerhub_user:
    type: string
    default: ${DOCKERHUB_USER}
  dockerhub_password:
    type: string
    default: ${DOCKEHUB_PASSWORD}

  # Docs parameters
  docs_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
  docs_cache_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
  heroku_api_key:
    type: string
    default: ${HEROKU_API_KEY}
  heroku_app_name:
    type: string
    default: ${HEROKU_APP_NAME}


#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:

  #
  # Atom Build shared params
  #

  # Base image versions and files
  - &atom_base_image_repo debian
  - &atom_base_image_tag buster-20210408-slim
  - &atom_cuda_amd64_image_repo nvcr.io/nvidia/cuda
  - &atom_cuda_aarch64_image_repo nvcr.io/nvidia/cuda-arm64
  - &atom_cuda_image_tag 11.3.0-cudnn8-runtime-ubuntu20.04

  # Typical params for building atom
  - &build_atom_shared_params
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      repo:
        type: string
        default: << pipeline.parameters.atom_repo_name >>
      stage:
        type: string
        default: atom
      stock_image_repo:
        type: string
        default: *atom_base_image_repo
      stock_image_tag:
        type: string
        default: *atom_base_image_tag
      build_args:
        type: string
        default: ""
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
      test_valgrind:
        type: boolean
        default: true
      executor:
        type: executor
        default: atom/build-ubuntu

  - &build_atom_shared_params_passthrough
      variant: << parameters.variant >>
      platform: << parameters.platform >>
      repo: << parameters.repo >>
      stage: << parameters.stage >>
      stock_image_repo: << parameters.stock_image_repo >>
      stock_image_tag: << parameters.stock_image_tag >>
      build_args: << parameters.build_args >>
      cache_repo: << parameters.cache_repo >>
      test_valgrind: << parameters.test_valgrind >>
      executor: << parameters.executor >>

  - &test_atom_default_params
      nucleus_under_test: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.nucleus_repo_name >>:build-<< pipeline.number >>-nucleus-atom-base-<< matrix.platform >>
      atom_under_test: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>:build-<< pipeline.number >>-test-<< matrix.variant >>-<< matrix.platform >>
      compose_file: ./.circleci/docker-compose-circle.yml
      compose_container_name: atom

  #
  # Deploy Configurations
  #

  # Shared config around atom deployment logic
  - &atom_deploy_shared_params
      matrix:
        parameters:
          platform: [ aarch64, amd64 ]
          variant: [ atom-base, atom-base-cv, atom-base-cv-graphics ]
      source_image: << pipeline.parameters.atom_repo_name >>
      source_tag: build-<< pipeline.number >>-atom
      target_image: << pipeline.parameters.atom_repo_name >>

  # Shared config around atom deployment logic
  - &nucleus_deploy_shared_params
      matrix:
        parameters:
          platform: [ aarch64, amd64 ]
          variant: [ atom-base ]
      source_image: << pipeline.parameters.nucleus_repo_name >>
      source_tag: build-<< pipeline.number >>-nucleus
      target_image: << pipeline.parameters.nucleus_repo_name >>

  #
  # Docs build shared info
  #
  - &docs_build_shared_config
      name: "build-docs"
      working_directory: doc
      file: Dockerfile
      image_name: << pipeline.parameters.docs_repo >>
      image_tag: build-<< pipeline.number >>
      cache_repo: << pipeline.parameters.docs_cache_repo >>
      cache_tag: cache-docs

  - &deploy_docs_shared
      source_image: << pipeline.parameters.docs_repo >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.docs_repo >>

  - &deploy_metrics_shared
      source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>

  - &deploy_formatter_shared
      source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>

#
# Circle config
#
version: 2.1

orbs:
  atom:  elementaryrobotics/atom@0.2.0

commands:

  heroku_deploy:
    parameters:
      source_image:
        type: string
      source_tag:
        type: string
    steps:
      - run:
          command: |
            docker login --username=_ --password=<< pipeline.parameters.heroku_api_key >> registry.heroku.com
            docker pull << parameters.source_image >>:<< parameters.source_tag >>-stock-amd64
            docker tag << parameters.source_image >>:<< parameters.source_tag >>-stock-amd64 registry.heroku.com/${HEROKU_APP_NAME}/web
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release -a << pipeline.parameters.heroku_app_name >> web

  build_atom:
    parameters:
      << : *build_atom_shared_params
    steps:

      # Check out the code, update submodules and log into Docker
      - checkout
      - atom/update_submodules
      - atom/docker_login

      # Build nucleus
      - atom/build_dockerfile_buildx:
          stage: << parameters.stage >>
          image_tag: build-<< pipeline.number >>-<< parameters.stage >>
          image_name: << pipeline.parameters.dockerhub_org >>/<< parameters.repo >>
          variant: << parameters.variant >>
          platform: << parameters.platform >>
          build_args: >-
            --build-arg STOCK_IMAGE=<< parameters.stock_image_repo >>:<< parameters.stock_image_tag >>
            --build-arg ATOM_BASE=<< parameters.variant >>
            << parameters.build_args >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-<< parameters.variant >>

      # Tag and push nucleus image
      - atom/push_image_variant:
          target_image: << pipeline.parameters.dockerhub_org >>/<< parameters.repo >>
          target_tag: build-<< pipeline.number >>-<< parameters.stage >>
          variant: << parameters.variant >>
          platform: << parameters.platform >>

  test_atom:
    parameters:
      nucleus_under_test:
        type: string
      atom_under_test:
        type: string
      compose_file:
        type: string
      compose_container_name:
        type: string
    steps:

      # Launch containers for testing
      - atom/run_compose:
          file: << parameters.compose_file >>
          build_args: "NUCLEUS_IMAGE=<< parameters.nucleus_under_test >> ATOM_IMAGE=<< parameters.atom_under_test >>"

      # Run unit tests
      - run:
          name: Python version
          command: docker exec -it -w /atom/languages/python/tests << parameters.compose_container_name >> python -V 2>&1 | grep "3.7"
      - run:
          name: Python type check
          command: docker exec -it << parameters.compose_container_name >> bash -c "cd /atom/languages/python && pyright -p pyrightconfig-ci.json atom"
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python/tests << parameters.compose_container_name >> pytest -vv --durations=0 --capture=tee-sys
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.compose_container_name >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.compose_container_name >> make test
      - run:
          name: C++ valgrind check
          command: docker exec -it -w /atom/languages/cpp << parameters.compose_container_name >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
          environment:
            G_SLICE: always-malloc
            G_DEBUG: gc-friendly
      - run:
          name: C++ copy valgrind log
          command: docker cp << parameters.compose_container_name >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log

jobs:

  build-dockerfile:
    parameters:
      << : *build_atom_shared_params
    executor: << parameters.executor >>
    steps:
      - build_atom:
          << : *build_atom_shared_params_passthrough

  build-dockerfile-and-test:
    parameters:
      << : *build_atom_shared_params
      nucleus_under_test:
        type: string
      atom_under_test:
        type: string
      compose_file:
        type: string
      compose_container_name:
        type: string
    executor: << parameters.executor >>
    steps:
      - build_atom:
          << : *build_atom_shared_params_passthrough
      - test_atom:
          nucleus_under_test: << parameters.nucleus_under_test >>
          atom_under_test: << parameters.atom_under_test >>
          compose_file: << parameters.compose_file >>
          compose_container_name: << parameters.compose_container_name >>

  build-docs:
    executor: atom/build-ubuntu
    steps:
      - checkout

      #
      # Build docker image
      #
      - atom/build_dockerfile_buildx:
          working_directory: doc
          stage: docs
          file: Dockerfile
          image_name: << pipeline.parameters.docs_repo >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.docs_cache_repo >>
          cache_tag: cache-docs

      # Push build image
      - atom/push_image:
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: build-<< pipeline.number >>

  deploy-docs-heroku:
    executor: atom/build-ubuntu
    steps:
      - heroku_deploy:
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>

  check-formatting:
    docker:
      - image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>:build-<< pipeline.number >>-stock-amd64
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check Formatting
          description: Run black & flake8 checks
          command: CODE_DIR=/root/project /usr/local/bin/run.sh

workflows:
  version: 2

  #
  # Build and deploy atom
  #
  atom-build:
    jobs:

      #
      # Intel
      #

      # Build nucleus
      - build-dockerfile:
          name: "build-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          repo: << pipeline.parameters.nucleus_repo_name >>
          matrix:
            parameters:
              platform: [ amd64 ]
              stage: [ nucleus ]
              variant: [ atom-base ]
          filters:
            tags:
              only:
                - /.*/

      # Build Stock + CV
      - build-dockerfile:
          name: "build-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          matrix:
            parameters:
              platform: [ amd64 ]
              stage: [ atom ]
              variant: [ atom-base, atom-base-cv ]
          requires:
            - build-atom-base-<< matrix.platform >>-nucleus
          filters:
            tags:
              only:
                - /.*/

      # Build CUDA
      - build-dockerfile:
          name: "build-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          stock_image_repo: *atom_cuda_amd64_image_repo
          stock_image_tag: *atom_cuda_image_tag
          matrix:
            parameters:
              platform: [ amd64 ]
              stage: [ atom ]
              variant: [ atom-base-cv-graphics ]
          requires:
            - build-atom-base-<< matrix.platform >>-nucleus
          filters:
            tags:
              only:
                - /.*/

      # Test Stock + CV
      - build-dockerfile-and-test:
          name: "test-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          << : *test_atom_default_params
          matrix:
            parameters:
              platform: [ amd64 ]
              stage: [ test ]
              variant: [ atom-base, atom-base-cv ]
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            tags:
              only:
                - /.*/

      # Test CUDA
      - build-dockerfile-and-test:
          name: "test-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          stock_image_repo: *atom_cuda_amd64_image_repo
          stock_image_tag: *atom_cuda_image_tag
          << : *test_atom_default_params
          matrix:
            parameters:
              platform: [ amd64 ]
              stage: [ test ]
              variant: [ atom-base-cv-graphics ]
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            tags:
              only:
                - /.*/

      #
      # ARM
      #

      # Build nucleus
      - build-dockerfile:
          name: "build-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          repo: << pipeline.parameters.nucleus_repo_name >>
          matrix:
            parameters:
              platform: [ aarch64 ]
              stage: [ nucleus ]
              variant: [ atom-base ]
          executor: atom/build-ubuntu-arm
          filters:
            tags:
              only:
                - /.*/

      # Build Stock + CV
      - build-dockerfile:
          name: "build-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          matrix:
            parameters:
              platform: [ aarch64 ]
              stage: [ atom ]
              variant: [ atom-base, atom-base-cv ]
          executor: atom/build-ubuntu-arm
          requires:
            - build-atom-base-<< matrix.platform >>-nucleus
          filters:
            tags:
              only:
                - /.*/

      # Build CUDA
      - build-dockerfile:
          name: "build-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          stock_image_repo: *atom_cuda_aarch64_image_repo
          stock_image_tag: *atom_cuda_image_tag
          matrix:
            parameters:
              platform: [ aarch64 ]
              stage: [ atom ]
              variant: [ atom-base-cv-graphics ]
          executor: atom/build-ubuntu-arm
          requires:
            - build-atom-base-<< matrix.platform >>-nucleus
          filters:
            tags:
              only:
                - /.*/

      # Test Stock + CV
      - build-dockerfile-and-test:
          name: "test-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          << : *test_atom_default_params
          matrix:
            parameters:
              platform: [ aarch64 ]
              stage: [ test ]
              variant: [ atom-base, atom-base-cv ]
          executor: atom/build-ubuntu-arm
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            tags:
              only:
                - /.*/

      # Test CUDA
      - build-dockerfile-and-test:
          name: "test-<< matrix.variant >>-<< matrix.platform >>-<< matrix.stage >>"
          stock_image_repo: *atom_cuda_aarch64_image_repo
          stock_image_tag: *atom_cuda_image_tag
          << : *test_atom_default_params
          matrix:
            parameters:
              platform: [ aarch64 ]
              stage: [ test ]
              variant: [ atom-base-cv-graphics ]
          executor: atom/build-ubuntu-arm
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            tags:
              only:
                - /.*/

      #
      # Deploy Nucleus
      #

      # Deploy development
      - atom/deploy:
          name: "deploy-development-<< matrix.variant >>-<< matrix.platform >>-nucleus"
          target_tag: development-<< pipeline.number >>-<< matrix.variant >>
          << : *nucleus_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-nucleus
          filters:
            branches:
              ignore:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-latest-<< matrix.variant >>-<< matrix.platform >>-nucleus"
          target_tag: latest-<< pipeline.number >>-<< matrix.variant >>
          << : *nucleus_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-nucleus
          filters:
            branches:
              only:
                - latest

      # Deploy release
      - atom/deploy_release:
          name: "deploy-release-<< matrix.variant >>-<< matrix.platform >>-nucleus"
          target_tag: << matrix.variant >>
          << : *nucleus_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-nucleus
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-tag-<< matrix.variant >>-<< matrix.platform >>-nucleus"
          target_tag: ${CIRCLE_TAG}-<< matrix.variant >>
          << : *nucleus_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-nucleus
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

      #
      # Deploy Atom
      #

      # Deploy development
      - atom/deploy:
          name: "deploy-development-<< matrix.variant >>-<< matrix.platform >>-atom"
          target_tag: development-<< pipeline.number >>-<< matrix.variant >>
          << : *atom_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            branches:
              ignore:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-latest-<< matrix.variant >>-<< matrix.platform >>-atom"
          target_tag: latest-<< pipeline.number >>-<< matrix.variant >>
          << : *atom_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            branches:
              only:
                - latest

      # Deploy release
      - atom/deploy_release:
          name: "deploy-release-<< matrix.variant >>-<< matrix.platform >>-atom"
          target_tag: << matrix.variant >>
          << : *atom_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-tag-<< matrix.variant >>-<< matrix.platform >>-atom"
          target_tag: ${CIRCLE_TAG}-<< matrix.variant >>
          << : *atom_deploy_shared_params
          requires:
            - build-<< matrix.variant >>-<< matrix.platform >>-atom
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/


  #
  # Build and deploy the metrics/grafana container
  #
  metrics-build:
    jobs:


      # Build for Intel + ARM
      - atom/build_buildx:
          name: "build-metrics-<< matrix.platform >>"
          matrix:
            parameters:
              platform: [ amd64, aarch64 ]
              executor: [ atom/build-ubuntu, atom/build-ubuntu-arm]
            exclude:
              - platform: amd64
                executor: atom/build-ubuntu-arm
              - platform: aarch64
                executor: atom/build-ubuntu
          working_directory: metrics
          image_name: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
          cache_tag: cache
          filters:
            tags:
              only: /.*/

      # Deploy development
      - atom/deploy:
          name: "deploy-metrics-development-<< matrix.platform >>"
          << : *deploy_metrics_shared
          target_tag: development-<< pipeline.number >>
          matrix:
            parameters:
              platform: [ amd64, aarch64 ]
          requires:
            - "build-metrics-<< matrix.platform >>"
          filters:
            branches:
              ignore:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-metrics-latest-<< matrix.platform >>"
          << : *deploy_metrics_shared
          target_tag: latest-<< pipeline.number >>
          matrix:
            parameters:
              platform: [ amd64, aarch64 ]
          requires:
            - "build-metrics-<< matrix.platform >>"
          filters:
            branches:
              only:
                - latest

      # Deploy release
      - atom/deploy_release:
          name: "deploy-metrics-release-<< matrix.platform >>"
          << : *deploy_metrics_shared
          target_tag: ""
          matrix:
            parameters:
              platform: [ amd64, aarch64 ]
          requires:
            - "build-metrics-<< matrix.platform >>"
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-metrics-tag-<< matrix.platform >>"
          << : *deploy_metrics_shared
          target_tag: ${CIRCLE_TAG}
          matrix:
            parameters:
              platform: [ amd64, aarch64 ]
          requires:
            - "build-metrics-<< matrix.platform >>"
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build the formatter, deploy the formatter, check formatting
  #
  formatter-build:
    jobs:

     # Build for intel
      - atom/build_buildx:
          name: "build-formatter"
          working_directory: utilities/formatting
          file: Dockerfile
          image_name: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
          cache_tag: cache
          filters:
            tags:
              only: /.*/

      - check-formatting:
          name: "check-formatting"
          requires:
            - "build-formatter"

      # Deploy development
      - atom/deploy:
          name: "deploy-formatter-development"
          << : *deploy_formatter_shared
          target_tag: development-<< pipeline.number >>
          requires:
            - "build-formatter"
          filters:
            branches:
              ignore:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-formatter-latest"
          << : *deploy_formatter_shared
          target_tag: latest-<< pipeline.number >>
          requires:
            - "build-formatter"
          filters:
            branches:
              only:
                - latest

      # Deploy release
      - atom/deploy_release:
          name: "deploy-formatter-release"
          << : *deploy_formatter_shared
          target_tag: ""
          requires:
            - "build-formatter"
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-formatter-tag"
          << : *deploy_formatter_shared
          target_tag: ${CIRCLE_TAG}
          requires:
            - "build-formatter"
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build and deploy the docs
  #
  docs-build:
    jobs:

      # Build the docs themselves
      - atom/build_buildx:
          << : *docs_build_shared_config
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # Builds of dev branches, deploy development-X
      - atom/deploy:
          name: "deploy-docs-dev"
          << : *deploy_docs_shared
          target_tag: development-<< pipeline.number >>
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - latest

      # Builds of latest branches. Deploy latest, latest-Y and Heroku
      - atom/deploy:
          name: "deploy-docs-latest-latest"
          << : *deploy_docs_shared
          target_tag: latest
          requires:
            - build-docs
          filters:
            branches:
              only:
                - latest
      - atom/deploy:
          name: "deploy-docs-latest-num"
          << : *deploy_docs_shared
          target_tag: latest-<< pipeline.number >>
          requires:
            - build-docs
          filters:
            branches:
              only:
                - latest
      - deploy-docs-heroku:
          name: "deploy-docs-latest-heroku"
          requires:
            - build-docs
          filters:
            branches:
              only:
                - latest

      # Builds of tag branches, deploy tag
      - atom/deploy:
          name: "deploy-docs-tag"
          << : *deploy_docs_shared
          target_tag: ${CIRCLE_TAG}
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/


  #
  # Nightly rebuild/redeploy of docs sites
  #
  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - latest
    jobs:
      - atom/build_buildx:
          << : *docs_build_shared_config

      - atom/deploy:
          name: "deploy-docs"
          << : *deploy_docs_shared
          target_tag: development-<< pipeline.number >>
          requires:
            - "build-docs"
          filters:
            branches:
              ignore:
                - latest

# .circleci/config.yml

#
# Parameters that can be set/changed for the build
#
parameters:

  # Atom parameters
  dockerhub_org:
    type: string
    default: elementaryrobotics
  atom_repo_name:
    type: string
    default: atom
  nucleus_repo_name:
    type: string
    default: nucleus
  metrics_repo_name:
    type: string
    default: metrics
  formatter_repo_name:
    type: string
    default: formatter
  dockerhub_user:
    type: string
    default: ${DOCKERHUB_USER}
  dockerhub_password:
    type: string
    default: ${DOCKERHUB_PASSWORD}

  # Docs parameters
  docs_repo_name:
    type: string
    default: atom-doc
  heroku_api_key:
    type: string
    default: ${HEROKU_API_KEY}
  heroku_app_name:
    type: string
    default: ${HEROKU_APP_NAME}


#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:

  #
  # Atom Build shared params
  #

  # Base image versions and files
  - &atom_base_image_repo ubuntu
  - &atom_base_image_tag focal-20210416
  - &atom_cuda_amd64_image_repo nvcr.io/nvidia/cuda
  - &atom_cuda_aarch64_image_repo nvcr.io/nvidia/cuda-arm64
  - &atom_cuda_image_tag 11.1.1-cudnn8-runtime

  # Atom types
  - &atom_type_base ""
  - &atom_type_cv "-cv"
  - &atom_type_cuda "-cuda"

  # Executor sizes for builds
  # NOTE: if you change this, you MUST ALSO CHANGE the atom_deploy_shared
  # config where we also have these strings hardcoded. There doesn't seem to be
  # a way around it.
  - &atom_amd64_build_executor atom/build-ubuntu
  - &atom_aarch64_build_executor atom/build-ubuntu-arm

  # Extra build args for the various platforms
  - &atom_amd64_build_args ""
  - &atom_aarch64_build_args --build-arg BLAS_TARGET_CPU=ARMV8 --build-arg PYARROW_EXTRA_CMAKE_ARGS=-DARROW_ARMV8_ARCH=armv8-a

  # Name for the build stage of atom
  - &atom_build_name build<< matrix.atom_type >>-<< matrix.executor >>

  # Typical params for building atom
  - &build_atom_shared_params
      atom_type:
        type: string
        default: ""
      base:
        type: string
        default: atom-base
      stock_image_repo:
        type: string
        default: *atom_base_image_repo
      stock_image_tag:
        type: string
        default: *atom_base_image_tag
      build_args:
        type: string
        default: *atom_amd64_build_args
      executor:
        type: executor
        default: *atom_amd64_build_executor

  - &build_atom_shared_mapping
      repo: << parameters.repo >>
      atom_type: << parameters.atom_type >>
      base: << parameters.base >>
      stock_image_repo: << parameters.stock_image_repo >>
      stock_image_tag: << parameters.stock_image_tag >>
      build_args: << parameters.build_args >>
      executor: << parameters.executor >>

  #
  # Deploy Configurations
  #

  - &atom_deploy_platforms "x86_64 aarch64"

  - &atom_deploy_shared
      matrix:
        parameters:
          repo: [ << pipeline.parameters.nucleus_repo_name >>, << pipeline.parameters.atom_repo_name >> ]
          atom_type: [*atom_type_base, *atom_type_cv, *atom_type_cuda]
        exclude:
          - repo: << pipeline.parameters.nucleus_repo_name >>
            atom_type: *atom_type_cv
          - repo: << pipeline.parameters.nucleus_repo_name >>
            atom_type: *atom_type_cuda
      requires:
        - build<< matrix.atom_type >>-atom/build-ubuntu
        - build<< matrix.atom_type >>-atom/build-ubuntu-arm

  - &metrics_deploy_shared
      source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
      platforms: *atom_deploy_platforms
      requires:
        - build-metrics-atom/build-ubuntu
        - build-metrics-atom/build-ubuntu-arm

  - &docs_deploy_shared
      source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.docs_repo_name >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.docs_repo_name >>
      requires:
        - build-docs

  - &formatter_deploy_shared
      source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
      requires:
        - build-formatter

#
# Circle config
#
version: 2.1

orbs:
  atom:  elementaryrobotics/atom@dev:manifests-7

commands:

  heroku_deploy:
    parameters:
      source_image:
        type: string
      source_tag:
        type: string
    steps:
      - run:
          command: |
            docker login --username=_ --password=<< pipeline.parameters.heroku_api_key >> registry.heroku.com
            docker pull << parameters.source_image >>:<< parameters.source_tag >>-stock-amd64
            docker tag << parameters.source_image >>:<< parameters.source_tag >>-stock-amd64 registry.heroku.com/${HEROKU_APP_NAME}/web
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release -a << pipeline.parameters.heroku_app_name >> web

  shared_setup:
    steps:
      - checkout
      - atom/update_submodules
      - atom/docker_login
      - run:
          name: Log into Nvidia Container Registry
          command: echo ${NGC_PASSWORD} | docker login nvcr.io -u ${NGC_USER} --password-stdin

  build_atom:
    parameters:
      << : *build_atom_shared_params
      repo:
        type: string
      stage:
        type: string
    steps:

      # Build nucleus
      - atom/build_dockerfile:
          stage: << parameters.stage >>
          target_image: << pipeline.parameters.dockerhub_org >>/<< parameters.repo >>
          target_tag: build-<< pipeline.number >><< parameters.atom_type >>
          build_args: >-
            --build-arg STOCK_IMAGE=<< parameters.stock_image_repo >>:<< parameters.stock_image_tag >>
            --build-arg ATOM_BASE=<< parameters.base >>
            << parameters.build_args >>
          # Always cache to atom -- will allow atom builds to leverage nucleus
          # build cache
          cache_repo: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          cache_tag: cache<< parameters.atom_type >>

      # Tag and push nucleus image
      - atom/push_image:
          target_image: << pipeline.parameters.dockerhub_org >>/<< parameters.repo >>
          target_tag: build-<< pipeline.number >><< parameters.atom_type >>

  test_atom:
    parameters:
      nucleus_under_test:
        type: string
      atom_under_test:
        type: string
      compose_file:
        type: string
      compose_container_name:
        type: string
    steps:

      # Launch containers for testing
      - atom/run_compose:
          file: << parameters.compose_file >>
          build_args: "NUCLEUS_IMAGE=<< parameters.nucleus_under_test >> ATOM_IMAGE=<< parameters.atom_under_test >>"

      # Run unit tests
      - run:
          name: Python version
          command: docker exec -it -w /atom/languages/python/tests << parameters.compose_container_name >> python -V 2>&1 | grep "3.8"
      - run:
          name: Python type check
          command: docker exec -it << parameters.compose_container_name >> bash -c "cd /atom/languages/python && pyright -p pyrightconfig-ci.json atom"
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python/tests << parameters.compose_container_name >> pytest -vv --durations=0 --capture=tee-sys
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.compose_container_name >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.compose_container_name >> make test
      - run:
          name: C++ valgrind check
          command: docker exec -it -w /atom/languages/cpp << parameters.compose_container_name >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
          environment:
            G_SLICE: always-malloc
            G_DEBUG: gc-friendly
      - run:
          name: C++ copy valgrind log
          command: docker cp << parameters.compose_container_name >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log

jobs:

  build-atom:
    parameters:
      << : *build_atom_shared_params
    executor: << parameters.executor >>
    steps:
      - shared_setup

      # Build nucleus, then atom, then test. Most time will be
      # spent in the nucleus stage as test + atom are just minor variants
      # on it
      - build_atom:
          << : *build_atom_shared_mapping
          repo: << pipeline.parameters.nucleus_repo_name >>
          stage: nucleus
      - build_atom:
          << : *build_atom_shared_mapping
          repo: << pipeline.parameters.atom_repo_name >>
          stage: atom
      - build_atom:
          << : *build_atom_shared_mapping
          repo: << pipeline.parameters.atom_repo_name >>
          stage: test

  test-atom:
    parameters:
      atom_type:
        type: string
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - shared_setup
      - test_atom:
          nucleus_under_test: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.nucleus_repo_name >>:build-<< pipeline.number >>-$(arch)
          atom_under_test: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>:build-<< pipeline.number >><< parameters.atom_type >>-$(arch)
          compose_file: .circleci/docker-compose-circle.yml
          compose_container_name: test_atom

  deploy-docs-heroku:
    executor: atom/build-ubuntu
    steps:
      - heroku_deploy:
          source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.docs_repo_name >>
          source_tag: build-<< pipeline.number >>

  check-formatting:
    docker:
      - image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>:build-<< pipeline.number >>-x86_64
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check Formatting
          description: Run formatting checks
          command: CODE_DIR=/root/project /usr/local/bin/run.sh

  deploy-atom:
    parameters:
      target_tag:
        type: string
      repo:
        type: string
      atom_type:
        type: string
    executor: atom/docker-in-docker
    steps:
      - setup_remote_docker
      - atom/create_manifest:
          source_image: << pipeline.parameters.dockerhub_org >>/<< parameters.repo >>
          source_tag: build-<< pipeline.number >><< parameters.atom_type >>
          target_image: << pipeline.parameters.dockerhub_org >>/<< parameters.repo >>
          target_tag: << parameters.target_tag >><< parameters.atom_type >>
          platforms: *atom_deploy_platforms

workflows:
  version: 2

  #
  # Build and deploy atom
  #
  atom-build:
    jobs:

      #
      # Intel
      #

      # Build base atom
      - build-atom:
          name: *atom_build_name
          base: atom-base
          stock_image_repo: *atom_base_image_repo
          stock_image_tag: *atom_base_image_tag
          matrix:
            parameters:
              executor: [ *atom_amd64_build_executor ]
              atom_type: [ *atom_type_base ]
          filters:
            tags:
              only:
                - /.*/

      # Build CV
      - build-atom:
          name: *atom_build_name
          base: atom-base-cv
          stock_image_repo: *atom_base_image_repo
          stock_image_tag: *atom_base_image_tag
          matrix:
            parameters:
              executor: [ *atom_amd64_build_executor ]
              atom_type: [ *atom_type_cv ]
          filters:
            tags:
              only:
                - /.*/

      # Build CUDA
      - build-atom:
          name: *atom_build_name
          base: atom-base-cv
          stock_image_repo: *atom_cuda_amd64_image_repo
          stock_image_tag: *atom_cuda_image_tag
          matrix:
            parameters:
              executor: [ *atom_amd64_build_executor ]
              atom_type: [ *atom_type_cuda ]
          filters:
            tags:
              only:
                - /.*/

      #
      # ARM
      #

      # Build base atom
      - build-atom:
          name: *atom_build_name
          base: atom-base
          stock_image_repo: *atom_base_image_repo
          stock_image_tag: *atom_base_image_tag
          build_args: *atom_aarch64_build_args
          matrix:
            parameters:
              executor: [ *atom_aarch64_build_executor ]
              atom_type: [ *atom_type_base ]
          filters:
            tags:
              only:
                - /.*/

      # Build CV atom
      - build-atom:
          name: *atom_build_name
          base: atom-base-cv
          stock_image_repo: *atom_base_image_repo
          stock_image_tag: *atom_base_image_tag
          build_args: *atom_aarch64_build_args
          matrix:
            parameters:
              executor: [ *atom_aarch64_build_executor ]
              atom_type: [ *atom_type_cv ]
          filters:
            tags:
              only:
                - /.*/

      # Build CUDA atom
      - build-atom:
          name: *atom_build_name
          base: atom-base-cv
          stock_image_repo: *atom_cuda_aarch64_image_repo
          stock_image_tag: *atom_cuda_image_tag
          build_args: *atom_aarch64_build_args
          matrix:
            parameters:
              executor: [ *atom_aarch64_build_executor ]
              atom_type: [ *atom_type_cuda ]
          filters:
            tags:
              only:
                - /.*/

      #
      # Test: All architectures in same place
      #

      # Test all flavors
      - test-atom:
          name: "test<< matrix.atom_type >>-<< matrix.executor >>"
          matrix:
            parameters:
              atom_type: [ *atom_type_base, *atom_type_cv, *atom_type_cuda ]
              executor: [ *atom_amd64_build_executor, *atom_aarch64_build_executor ]
          requires:
            - *atom_build_name
          filters:
            tags:
              only:
                - /.*/

      #
      # Deploy: Multi-arch manifests for all builds
      #

      # Deploy development
      - deploy-atom:
          name: "deploy-development-<< matrix.repo >><< matrix.atom_type >>"
          target_tag: development-<< pipeline.number >>
          << : *atom_deploy_shared
          filters:
            branches:
              ignore:
                - latest

      # Deploy versioned latest
      - deploy-atom:
          name: "deploy-versioned-latest-<< matrix.repo >><< matrix.atom_type >>"
          target_tag: latest-<< pipeline.number >>
          << : *atom_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy  latest
      - deploy-atom:
          name: "deploy-latest-<< matrix.repo >><< matrix.atom_type >>"
          target_tag: latest
          << : *atom_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - deploy-atom:
          name: "deploy-tag-<< matrix.repo >><< matrix.atom_type >>"
          target_tag: ${CIRCLE_TAG}
          << : *atom_deploy_shared
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build and deploy the metrics/grafana container
  #
  metrics-build:
    jobs:


      # Build for Intel + ARM
      - atom/build_image:
          name: "build-metrics-<< matrix.executor >>"
          matrix:
            parameters:
              executor: [ *atom_amd64_build_executor, *atom_aarch64_build_executor ]
          file: metrics/Dockerfile
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
          target_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.metrics_repo_name >>
          cache_tag: cache
          filters:
            tags:
              only: /.*/

      # Deploy development
      - atom/deploy:
          name: "deploy-metrics-development"
          target_tag: development-<< pipeline.number >>
          << : *metrics_deploy_shared
          filters:
            branches:
              ignore:
                - latest

      # Deploy versioned latest
      - atom/deploy:
          name: "deploy-metrics-versioned-latest"
          target_tag: latest-<< pipeline.number >>
          << : *metrics_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-metrics-latest"
          target_tag: latest
          << : *metrics_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-metrics-tag"
          target_tag: ${CIRCLE_TAG}
          << : *metrics_deploy_shared
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build the formatter, deploy the formatter, check formatting
  #
  formatter-build:
    jobs:

     # Build for intel
      - atom/build_image:
          name: "build-formatter"
          working_directory: utilities/formatting
          file: Dockerfile
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
          target_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.formatter_repo_name >>
          cache_tag: cache
          filters:
            tags:
              only: /.*/

      - check-formatting:
          name: "check-formatting"
          requires:
            - "build-formatter"

      # Deploy development
      - atom/deploy:
          name: "deploy-formatter-development"
          target_tag: development-<< pipeline.number >>
          << : *formatter_deploy_shared
          filters:
            branches:
              ignore:
                - latest

      # Deploy versioned latest
      - atom/deploy:
          name: "deploy-formatter-versioned-latest"
          target_tag: latest-<< pipeline.number >>
          << : *formatter_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-formatter-latest"
          target_tag: latest
          << : *formatter_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-formatter-tag"
          target_tag: ${CIRCLE_TAG}
          << : *formatter_deploy_shared
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
  #
  # Build and deploy the docs
  #
  docs-build:
    jobs:

      # Build the docs themselves
      - atom/build_image:
          name: "build-docs"
          working_directory: doc
          file: Dockerfile
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.docs_repo_name >>
          target_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.docs_repo_name >>
          cache_tag: cache-docs
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # Deploy development
      - atom/deploy:
          name: "deploy-docs-development"
          target_tag: development-<< pipeline.number >>
          << : *docs_deploy_shared
          filters:
            branches:
              ignore:
                - latest

      # Deploy versioned latest
      - atom/deploy:
          name: "deploy-docs-versioned-latest"
          target_tag: latest-<< pipeline.number >>
          << : *docs_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy latest
      - atom/deploy:
          name: "deploy-docs-latest"
          target_tag: latest
          << : *docs_deploy_shared
          filters:
            branches:
              only:
                - latest

      # Deploy tag
      - atom/deploy:
          name: "deploy-docs-tag"
          target_tag: ${CIRCLE_TAG}
          << : *docs_deploy_shared
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

      # Deploy merges to latest to heroku
      - deploy-docs-heroku:
          name: "deploy-docs-latest-heroku"
          requires:
            - build-docs
          filters:
            branches:
              only:
                - latest
